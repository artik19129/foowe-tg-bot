import { MyContext } from '../interfaces/ctx.interface';
import Account from '../models/Account';
import InviteCode from '../models/InviteCode';

export default async (ctx: MyContext, next: Function) => {

    // @ts-ignore
    if (ctx.chat.type === 'private') {
        await ctx.replyWithChatAction('typing');

        // @ts-ignore
        const account = await Account.getAccountsByTelegram(ctx.message.from.id);

        if (!account) {
            let regexp = new RegExp('^[0-9]+$');
            // @ts-ignore
            let test = regexp.test(ctx.message.text.toString());

            if (test) {
                // @ts-ignore
                const code = await InviteCode.checkCode(ctx.message.text.toString());

                if (code) {

                    const account = await Account.createAccount({
                        // @ts-ignore
                        login: ctx.message.from.username || ctx.message.from.first_name,
                        password: 'none',
                        email: 'none',
                        // @ts-ignore
                        telegram: ctx.message.from.id,
                        rights: code.rights
                    });
                    await InviteCode.activateCode(code.id, account.telegram);

                    // @ts-ignore
                    await ctx.telegram.sendMessage(-1001556225791, `üì¢ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å ${ctx.message.from.first_name} (@${ctx.message.from.username}) –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!`)

                    // await ctx.deleteMessage(); //TODO: –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ
                    await ctx.reply('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω!\nüîì –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.');
                    return next();
                } else {
                    return ctx.reply('‚ùå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
                }
            } else return ctx.reply('‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥.\nüîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:');
        } else return next();
    }
    return next();
}
